#!/usr/bin/env zsh


########################### Env ###########################

# Powerline
#powerline-daemon -q
#. $PYTHON_HOME_DIR/lib/python/site-packages/powerline/bindings/zsh/powerline.zsh

########################### Alias ###########################

# 独自function
alias tma='peco-tmux-attach'

########################### Key Bindings ###########################

# 履歴からコマンド選択
zle -N peco-select-history
bindkey '^r' peco-select-history

# 隠しファイルの表示切り替え
zle -N toggle-show-all-files
bindkey '^t^t' toggle-show-all-files

# ディレクトリ検索
zle -N peco-find-directory
bindkey '^f^f' peco-find-directory

# スニペット検索
zle -N peco-snippets
bindkey '^x^s' peco-snippets
zle -N peco-snippets-copy
bindkey '^x^x' peco-snippets-copy



########################### Function ###########################


# コマンド履歴のpeco検索
function peco-select-history() {
    local tac
    if which tac > /dev/null; then
        tac="tac"
    else
        tac="tail -r"
    fi
    BUFFER=$(history -n 1 | eval $tac | awk '!a[$0]++' | peco --query "$LBUFFER")
    CURSOR=$#BUFFER
    # zle clear-screen
}

# ディレクトリ検索
# http://qiita.com/ymorired/items/4b0d8e95786efc1378b4
function peco-find-directory() {
    local current_buffer=$BUFFER
    # .git系など不可視フォルダは除外
    local selected_dir="$(find . -maxdepth 3 -type d ! -path "*/.*"| peco)"
    if [ -d "$selected_dir" ]; then
        BUFFER="${current_buffer} ${selected_dir}"
        CURSOR=$#BUFFER
    fi
    zle clear-screen
}

# tmux セッション検索(alias用)
function peco-tmux-attach() {
    local res=$(tmux list-sessions | peco | awk -F':' '{print $1}')
    if [ -n "$res" ]; then
        tmux attach -t ${res}
    fi
}


# スニペット検索
function peco-snippets() {
    BUFFER=$(grep -v "^#" ~/.snippets | peco --query "$LBUFFER")
    zle clear-screen
}

function peco-snippets-copy() {
    BUFFER=$(grep -v "^#" ~/.snippets | peco --query "$LBUFFER" | pbcopy)
    zle clear-screen
}

# ↓をセットしたdir内で、tsshを実行する
# ap_servers=(
#   "prod-mikasa-media-webap01"
#   "prod-mikasa-media-webap02"
#   "prod-mikasa-media-webap03"
#   "prod-mikasa-media-webap04"
# )
# export AP_SERVERS=${ap_servers[@]}
function tssh() {
    if [ ! ${AP_SERVERS} ]; then
        echo "direnv未設定";
        return 1;
    fi

    array=(a`echo ${AP_SERVERS[@]}`)
    if [ ${#array} == 0 ]; then
        echo "direnv未設定";
        return 1;
    fi

    _tssh `echo ${AP_SERVERS[@]}`
}

# tmuxで複数サーバの同時オペレーション
# 「tssh `echo ${AP_SERVERS[@]}`」
# 
# (e.g. .dotenv)
#  ap_server=("web01" "web02" "web03" "web04")
#  export AP_SERVERS=${ap_servers[@]}
# 
function _tssh() {
    window=tssh
    hosts=("$@")

    if [ -n "$SESSION_NAME" ];then
      session=$SESSION_NAME
    else
      session="tssh-$$"
    fi

    tmux start-server

    is_first="true"
    for host in ${hosts[@]}; do
        cmd="ssh $host"
        # cmd="ssh $SSH_OPTION $USER@$host"
        if [ "${is_first}" == "true" ]; then
            ### tmuxのセッションを作成
            tmux new-session -d -n $window -s $session "$cmd"
            is_first="false"
        else
            tmux split-window  -t $session "$cmd"
            tmux select-layout -t $session tiled 1>/dev/null
        fi
    done

    tmux set-window-option -t $session synchronize-panes on
    ### 最初のpaneを選択状態にする
    tmux select-pane -t 0
    ### セッションにアタッチ
    tmux attach-session -t $session
}

jvc() { export JAVA_HOME=`/usr/libexec/java_home -X | python -c 'import sys, plistlib; plist = plistlib.readPlist(sys.stdin); print "\n".join(str(dict["JVMVersion"]) for dict in plist)' | peco --prompt "Switch Java Version >" | xargs /usr/libexec/java_home -v` }

